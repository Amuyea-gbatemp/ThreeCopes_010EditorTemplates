//------------------------------------------------
//--- 010 Editor Binary Template
//
//      File: FE Three Hopes 59.bin from linkdata a
//   Authors: DeathChaos
//   Version: 1.00
//   History
//   1.00    2022-06-10  DeathChaos - started this
//------------------------------------------------

typedef char bool;
typedef char s8;
typedef uchar u8;
typedef int16 s16;
typedef uint16 u16;
typedef int16 s16;
typedef int32 s32;
typedef uint32 u32;
typedef int64 s64;
typedef uint64 u64;
typedef hfloat f16;
typedef float f32;
typedef double f64;

LittleEndian();

local uint __RandomSeed = 0xDEADBABE;
local uint __RandomBit = 0;
local uint __RandomCount = 0;

void resetRandom() {
__RandomSeed = 0xDEADBABE;
 __RandomBit = 0;
__RandomCount = 0;
}
 
uint MyRandom( uint to )
{
    ++__RandomCount;
    __RandomBit  = ( (__RandomSeed >> 0 ) ^ ( __RandomSeed >> 2 ) ^ ( __RandomSeed >> 3 ) ^ ( __RandomSeed >> 5 ) ) & 1;
    __RandomSeed = ( ( ( ( __RandomBit << 15 ) | ( __RandomSeed >> 1 ) ) + ( 0xBABE / __RandomCount ) ) % to );

    while( __RandomSeed < 0 )
        __RandomSeed += to;

    return __RandomSeed;
}

uint RandomColor()
{
    return MyRandom( 0xFFFFFFFF );
}

SetBackColor( RandomColor() );

typedef enum <s8> CLASSNAMES{
Noble = 0,
Commoner,
Myrmidon,
Soldier,
Fighter,
Monk,
Lord,
Mercenary,
Thief,
ArmoredKnight,
Cavalier,
Brigand,
Archer,
Brawler,
Mage,
DarkMage,
Priest,
Barbarossa,
Hero,
Swordmaster,
Assassin,
FortressKnight,
Paladin,
PegasusKnight,
WyvernRider,
Warrior,
Sniper,
Grappler,
Warlock,
DarkBishop,
Bishop,
FalconKnight,
WyvernLord,
MortalSavant,
GreatKnight,
BowKnight,
DarkKnight,
HolyKnight,
WarMaster,
Gremory,
Emperor,
Agastya,
EnlightenedOne,
Dancer,
GreatLord,
ArmoredLord,
HighLord,
WyvernMaster,
DeathKnight,
Fluegel,
Trickster,
WarMonk,
DarkFlier,
Valkyrie,
Saint,
Avesta,
Prionsa,
Gurgan,
Asura,
Silverheart
}ClassNames;

typedef enum <s8> CLASSTIERS{
  Null = 0,
  Beginner,
  Intermediate,
  Advanced,
  Master
}ClassTiers;

typedef enum <s16> GENDERLOCK{
  MaleOnly = 0x100,
  FemaleOnly = 0x101,
  NoGenderLock = 0xFFFF
}GenderLock;

typedef enum <s8> MOVETYPE{
  Infantry = 0,
  Armored,
  Cavalry,
  ArmoredCavalry,
  Magic,
  Lightweight,
  Flying,
  Unknown1
}MoveType;

typedef struct
{
  s16 BonusHP<name="Bonus HP">;
  s16 BonusStr<name="Bonus Str">;
  s16 BonusMag<name="Bonus Mag">;
  s16 BonusDex<name="Bonus Dex">;
  s16 BonusSpd<name="Bonus Spd">;
  s16 BonusLck<name="Bonus Lck">;
  s16 BonusDef<name="Bonus Def">;
  s16 BonusRes<name="Bonus Res">;
  s16 BonusCha<name="Bonus Cha">;
  s16 BonusMov<name="Bonus Mov">;
}BonusStats;

typedef struct
{
  MoveType Mounted;
  MoveType Unmounted;
}MovementType<read=Str("%s - %s", EnumToString(Mounted), EnumToString(Unmounted))>;



typedef struct
{
  s16 NameID_Male<format=hex>;
  s16 NameID_Female<format=hex>;
  s16 MaleAID[3];
  s16 FemaleAID[3];
  s16 field10;
  s16 field12;
  s16 field14;
  s16 field16;
  s16 field18;
  s16 field1a;
  s16 field1c;
  s16 ClassInnateAbilitiesp[4]<name="Class Innate Abilities">;
  BonusStats UnmountedBonusStats<name="Bonus Stats (unmounted)">;
  BonusStats MountedBonusStats<name="Bonus Stats (mounted)">;
  MovementType MovementTypeValues<name="Movement Types">;
  ClassTiers ClassTier;
  u8 field51;
  s16 field52;
  s16 field54;
  s16 field56;
  s16 field58;
  s16 field5a;
  s16 field5c;
  s16 field5e;
  s16 field60;
  s16 field62;
  s16 field64;
  s16 field66;
  s16 field68;
  s16 field6a;
  s16 field6c;
  s16 field6e;
  s16 field70;
  s16 field72;
  s16 field74;
  s16 field76;
  s16 field78;
  s16 field7a;
  s16 field7c;
  s16 field7e;
  GenderLock ClassGender;
  s16 field82;
  s16 field84;
  s16 field86;
  s16 field88;
  s16 field8a;
  s16 field8c;
  s16 field8e;
  s16 field90;
  s16 field92;
  s16 field94;
  s16 field96;
  s16 field98;
  s16 field9a;
  s16 field9c;
  s16 field9e;
  s16 fielda0;
  s16 fielda2;
  s16 fielda4;
  s16 fielda6;
  s16 fielda8;
  s16 fieldaa;
  s16 fieldac;
  s16 fieldae;
  local ClassNames tmp;
  tmp = i;
} ClassData<optimize=false, name="Class Data">;

typedef struct
{
  local int i<hidden=true>;
  for ( i = 0; i < 100; i++ )
  {
    ClassData Data<read=GetClassNames>;
    SetBackColor( RandomColor() );
  }
} ClassDataFile <optimize=false>;

string GetClassNames( ClassData &j )
{
  return EnumToString(j.tmp);
}

local string filePath = GetFileName();
local string fileName = FileNameGetBase( filePath, false );

if ( !Stricmp( fileName, "LINKDATA_A" ) )
{
  FSeek( 0x191500 ); //location of File 141 inside Linkdata
}
ClassDataFile file; 